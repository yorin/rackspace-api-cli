#!/bin/bash
#v1.04 yorin

USERNAME='' #INSERT YOUR RACKSPACE USERNAME HERE
APIKEY='' #INSERT YOUT RACKSPACE APIKEY HERE
export PASS2="$1"

function userapi {
 echo -e ' USERNAME & APIKEY not empty'
}
function notvalid {
 echo -e ' INVALID ARGUMENT! Usage of the script are as follows:'
 echo -e ' -SHOWDRIVE'
 echo -e ' -SHOWTOKEN'
 echo -e ' -SHOW -L (rackspace api link)'
 echo -e ' -PUT  -X (content-type) -F (target file) -L (destination link)'
 echo -e ' -GET  -F (target file) -L (target link)'
}
function curlmain {
  if [ ! -d ".cache" ]; then
    mkdir -p .cache
  fi
  curl -s -d  '<?xml version="1.0" encoding="UTF-8"?><auth><apiKeyCredentials xmlns="http://docs.rackspace.com/identity/api/ext/RAX-KSKEY/v1.0" username="'$USERNAME'" apiKey="'$APIKEY'"/></auth>' -H 'Content-Type: application/xml' -H 'Accept: application/xml' 'https://identity.api.rackspacecloud.com/v2.0/tokens' > .cache/tokens.xml
}
function fetchtoken {
     cat .cache/tokens.xml | grep -o "<token .*><tenant" |awk  '{print $2}' | cut -c4-  | sed 's/^"\(.*\)"$/\1/'
}
function checkexpire {
  CDATEUTCEPOCH=$(date -u +%s) #UTC epoch datetime
  if [ ! -f ".cache/tokens.xml" ] || [ ! -s ".cache/tokens.xml" ]; then
   RSTDEXPIRE=0
  else
   RSTDEXPIRE=$(date --date=`cat .cache/tokens.xml |grep -o "<token id=".*" expires=".*"><tenant" |awk '{print $3}' |sed 's/ires=//' |sed 's/><tenant//' |sed 's/["]//g'|sed 's/exp//'` +%s)
  fi
   DIFF=$(($RSTDEXPIRE - $CDATEUTCEPOCH))
   echo "DIFF: $DIFF"
   echo "RSTDEXPIRE: $RSTDEXPIRE"
   if [ "$DIFF" -le "0" ] || [ "$RSTDEXPIRE" -eq "0" ]; then 
    curlmain
   fi
}
if [ -z "$USERNAME" ] && [ -z "$APIKEY" ]; then
  userapi
  exit
elif [ "$PASS2" == '-SHOWDRIVE' ]; then
  checkexpire
  cat .cache/tokens.xml | grep -Po '<service type="object-store" name="cloudFiles">.*?</service>' |sed 's/\(<service type=\"object-store\" name=\"cloudFiles\">\|<\/service>\)//g'|grep -oP '<endpoint .*?\/>' |awk '{print $2,   $4}'
  exit
elif [ "$PASS2" == '-SHOWTOKEN' ]; then
  checkexpire
  fetchtoken
  exit
else
   if [ "$#" == "7" ] && [ "$PASS2" == "-PUT" ] && [ "$2" == '-X' ] && [ "$4" == '-F' ] && [ "$6" == '-L' ] && [ ! -z "$(fetchtoken)" ]; then
     checkexpire
     sleep 2
     TOKEN=$(fetchtoken);
     sleep 2
     OUTPUT=$(curl -v -X PUT -T $5 -H "Content-Type: $3" -H "X-Auth-Token: $TOKEN" -k $7);
     sleep 2
     echo "$OUTPUT"
     exit
   elif [ "$#" = "5" ] && [ "$PASS2" == "-GET" ] && [ "$2" == '-F' ] && [ "$4" == '-L' ] && [ ! -z "$(fetchtoken)" ]; then
     checkexpire
     sleep 2
     TOKEN=$(fetchtoken);
     sleep 2
     OUTGET=$(curl -o $3 -H "X-Auth-Token: $TOKEN" -k $5\/$3);
     sleep 2
     echo "$OUTGET"
     exit
   elif [ "$#" = "3" ] && [ "$PASS2" == '-SHOW' ] && [ "$2" == '-L' ] && [ ! -z "$(fetchtoken)" ]; then
     checkexpire
     sleep 2
     TOKEN=$(fetchtoken);
     sleep 2
     RSSHOW=$(curl -s -H 'Content-Type: application/xml' -H "X-Auth-Token: $TOKEN" -k $3?format=xml |grep -oP '<name>(.*?)<\/name>(.*?)<bytes>(.*?)<\/bytes>'|sed 's/<bytes>\(.*\)<\/bytes>/\1 bytes/g'|sed 's/<name>\(.*\)<\/name>/\1 /g'|sed 's/<content_type>\(.*\)<\/content_type>/\1 /g'|sed 's/<hash>\(.*\)<\/hash>//g'|sed 's/<count>\(.*\)<\/count>//g'|awk '{sbytes = $2/1048576; print sbytes " MB   "  $1"\n"}' |column -t);
     echo "$RSSHOW"
     exit
   else
     notvalid
     exit
   fi
   exit
fi
exit
